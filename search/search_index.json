{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the documentation site for the Dancing with the Fans (DWTF) web application located at DWTF App.</p>"},{"location":"#app-summary","title":"App Summary","text":"<p>The app is a web application designed for mobile use and exclusive to fans of the television show Dancing with the Stars. You can think of the app as social media for DWTS fans, where users can search through an entire database of professional dancers, teams, and dances seen on the show. They can even \"play judge\" by submitting their personal score and viewing the average fan score for any given dance.</p> <p>Aside from the core feature of being able to find a dance out of the thousands that have been done on the show, users can customize their profile by liking their favorite pros/teams/dances and find fans with similar interests. They are then able to view the fan favorites by pros, teams, dances by season, dances by style, etc.</p> <p>Users also have the option to add their birthday, link their social media accounts (fan account or personal), and note which season they've been watching since.</p>"},{"location":"#developer-introduction","title":"Developer Introduction","text":"<p>My name is Samantha Perez and I graduated from the University of Central Florida in August '21 with my Bachelors in Computer Science. I graduated Summa Cum Laude in the College of Engineering and Computer Science and first in my major, excited to begin applying my skills outside of the classroom post-graduation.</p> <p>To be clear, I am not affiliated with Dancing with the Stars. I am merely just an avid fan who wanted to apply her software developer skills to a real-world interest. While in college, I was determined to create an app as a personal project to add to my resume and wanted the subject of the app to be something I am passionate about. The app is not monetized and I am not profiting off of it in any way. The content credit section makes it clear that I do not claim to own any of the content or images seen within the app. My code is currently stored in a public GitHub repository that can be accessed here.</p> <p>I am very excited to finally share this app with the DWTS community and hope it will be of use in the most random of times, as that was the purpose I intended. Continue reading these docs if you would like to know more about the app's features and development process!</p>"},{"location":"credit/content/","title":"Content Credit","text":"<p>Respective credit to all owners of material used within the app</p>"},{"location":"credit/content/#images","title":"Images","text":"<p>All images were retrieved from Disney General Entertainment Content, Dancing with the Stars Wiki and public Instagram/Twitter accounts. I do not claim to own the rights of any images seen within the app.</p>"},{"location":"credit/content/#contextual-information","title":"Contextual Information","text":"<p>All contextual information was retrieved from public websites, mainly Wikipedia, and is entirely public information that can be accessed by any other person.</p>"},{"location":"credit/content/#videos","title":"Videos","text":"<p>Many dances in the app contain public video links found on YouTube and Vimeo. No copyright infringement was intended and I do not claim to own the rights to any of the dances.</p>"},{"location":"credit/shoutout/","title":"Shoutouts","text":"<p>Shoutout to the incredible people who assisted with data entry, provided quality UX feedback, and supported me along the way</p>"},{"location":"credit/shoutout/#data-entry","title":"Data Entry","text":"<p>Huge thank you to Ashley, Karolina, Graysen, Anyon, and T for helping input all the data needed to bring the app to its full functionality.</p> <p>As of October 28th, 2024:</p> <ul> <li>12 tours</li> <li>33 seasons</li> <li>66 pros</li> <li>406 celebs</li> <li>419 teams</li> <li>3471 dances</li> <li>11019 scores</li> </ul>"},{"location":"credit/shoutout/#usability-testing","title":"Usability Testing","text":"<p>Thank you to Ashley for providing me feedback on dozens of simple UI/UX questions over several months and for being my timezone guinea pig. I'm very grateful to have someone who never minds me presenting random design dilemmas to at 4 o'clock in the morning.</p>"},{"location":"credit/shoutout/#support","title":"Support","text":"<p>Thank you to my friends and incredible Twitter community for supporting me and keeping me motivated throughout the course of this project. I kept the app and its obstacles to myself (aside from a handful of people) until weeks before release out of fear the project was too much of a challenge for me and I would eventually scrap it. Those people gave me the encouragement I needed on the most difficult of days and I am very thankful to have such a supportive inner circle.</p> <p>Lastly, thank you to Alan for his constant support of my journey as a developer throughout college to present day. I feel very appreciative that one of the cast members on the show was just as excited to see the end result as everyone else was.</p> <p>\ud83e\udd0d \ud83e\udd0d \ud83e\udd0d</p>"},{"location":"dev/background/","title":"Background","text":"<p>Read the backstory to how the app went from a small-scale idea to a full-stack web application</p>"},{"location":"dev/background/#initial-dilemma","title":"Initial Dilemma","text":"<p>For years now, I have faced this predicament where I would hear a song on the radio or within Spotify playlists that had been danced to on Dancing with the Stars but it would pain me trying to remember who danced to it. Google would sometimes quickly resolve the problem but only so many dances are published on YouTube and easily accessible through a Google search. I had always wished there were a more convenient method to finding past dances especially when so many songs are reused across the seasons.</p>"},{"location":"dev/background/#fall-2019","title":"Fall 2019","text":"<p>During my data structures &amp; algorithms class, one of the first computer science courses I took in college, I was introduced to C programming. As it is a procedural programming language that can be used to build databases and compilers, I looked into creating a database system storing all DWTS content that would make searching for dances convenient. Because I was still very new to the language and a few subsequent classes made me not want to continue programming in C, I scrapped this idea.</p>"},{"location":"dev/background/#fall-2020","title":"Fall 2020","text":"<p>Upon the release of ios14, I came up with the idea of making a DWTS widget that would generate pictures of the user's favorite team(s) right onto their home screens. I messed around with Swift for a brief period of time but ultimately scrapped the idea.</p>"},{"location":"dev/background/#spring-2021","title":"Spring 2021","text":"<p>In my second to last undergrad term, I was introduced to software engineering and the world of full-stack applications. My Processes for Object-Oriented Software Development class was a group project based course where my group and I created two full-stack web applications. The first was a simple contact manager application built using the LAMP (Linux, Apache, MySQL, PHP) stack and the second was a housing manager app built on the MERN (MongoDB, ExpressJS, ReactJS, NodeJS) stack. In my two-semester long Senior Design capstone course, my team and I were given the task of enhancing a web application built on the PEVN (PostgreSQL, ExpressJS, VueJS, NodeJS) stack for a local non-profit STEM center.</p> <p>I've always had a passion for design and was one of the frontend developers for all three apps. I only gained brief experience with JavaScript from my Web Design and Computer Graphics courses but grew to love the language while doing frontend development. After completion of our contact manager app, the idea of creating a full-stack web application surrounding Dancing with the Stars came to me. My ideas became a combination of my previous scrapped concepts plus new ideas that I had just discovered were possible.</p> <p>At 3 o'clock in the morning one random day in March, I created a note in my phone's notes app listing out all my ideas for the app, technologies I wanted to use, and deadlines I was hoping to reach. I then sketched design ideas for the app's features, created a GitHub repository, and got to coding.</p>"},{"location":"dev/background/#august-2021","title":"August 2021","text":"<p>I graduated from college in the beginning of August with only a functioning backend, sign in/up landing page, and basic template for the main search portal. Up until May 2022, I was working part-time and would make progress in the app almost every moment I wasn't working. On the days I was completely free, I would be coding for up to 16 hours straight. Though my original (and very naive) goal was to finish the app by the time I graduated, I am proud of all the progress I've made and knowledge I've gained as a developer in the following months.</p>"},{"location":"dev/background/#february-2022","title":"February 2022","text":"<p>With the new year came the internet's newest obsession - Wordle, a simple word game where players have six chances to guess a five-letter word that's generated daily. As a spur of the moment idea, I sought out to create a DWTS themed wordle. All I had to do was modify an open-source Wordle clone, make minor design changes, and customize the word list to be entirely DWTS-related words. I deployed the app on Heroku, published the link on Twitter, and had many friends tell me they enjoyed the app and the fact our small DWTS community had something unique to interact with. This side project sparked the idea of generating a dance from a previous season everyday where users would be able to \"play judge\" and submit their personal scores in the app.</p>"},{"location":"dev/background/#may-2022","title":"May 2022","text":"<p>As of May 1st, the app is now public and ready for users to begin using it. A few friends and I had spent the two weeks leading up to release date inputting as much data as we could. I could have waited to release the app until every single piece of data was inputted but I decided it was time to finally release it after working on it for so long. I have many more plans for development to make the app more interactive and hope to be able to achieve them in the future.\ud83e\udd1e</p>"},{"location":"dev/challenges/","title":"Challenges","text":"<p>Read about part of the reason why the app took quite longer than expected to complete\ud83d\ude43</p> <p>Disclaimer: It may seem unconventional to include my challenges and failures on this documentation site but as this is the first solo project of my career, I wanted to encompass my entire journey to eventually look back on. I am aware many of my challenges would have been avoided had I done a little bit more research or had more experience in the field. However, each obstacle was part of the learning process and helped me grow as a developer.</p>"},{"location":"dev/challenges/#database","title":"Database","text":"<p>My original idea was to make a web application using the MERN (MongoDB, ExpressJS, ReactJS, NodeJS) stack so the app's database happened to be MongoDB for several months. It wasn't until I realized just how much relational data I was going to be working with when I acknowledged Mongo was not the right choice the app. At this point, I had around a dozen schemas and fully functioning API controllers/routes and began my research on relational database management systems. I had very little familiarity with both PostgreSQL and MySQL through college and ultimately decided on PostgreSQL. It took me about a month to convert my entire backend and add many new table schemas/controllers/routes. Though I wish I had done more research on relational databases from the start, I gained a lot of experience with MongoDB and hope to work with it again in the future.</p> <p>Another challenge surrounding the database were my queries. I went back and forth on whether or not to utilize an ORM, such as Sequelize, to make handling my API much easier but ultimately decided against it. I never had much interest in databases but learning raw SQL ended up being an enjoyable experience. The issue arose when I needed data connected by foreign keys in the frontend. SQL joins were extremely overwhelming at first so to avoid them altogether I loaded all my data in at once using a custom action creator and then many JavaScript functions to filter the data to only what I needed. Once I accepted that this was a lazy workaround, I began incorporating left joins into my queries. Because of my lack of experience with databases, some days were extremely discouraging and many queries became too complex to debug.</p>"},{"location":"dev/challenges/#frameworks-libraries","title":"Frameworks / Libraries","text":"<p>The app's frontend is almost entirely built using Material UI but it wasn't until a few months in when I finally incorporated MUI into the project. I was originally hard coding CSS in every component due to my excitement to use styled components. Once text and containers began to be an issue, I knew I needed a reusable library to make my life easier and MUI did just that and more. I still ran into many minor issues with unexpected behavior from MUI components but I cannot imagine how much time and stress I have saved myself by adapting the project to the library.</p>"},{"location":"dev/challenges/#timezones","title":"Timezones...","text":"<p>One obstacle I was not expecting to put a damper on things after I first deployed the app was the battle with timezones. Though I was cautious of timezones during development and made sure any time data type in the database was timezone inclusive, developing in east coast time on an east coast server did not prepare me for production. My friends began entering the pros and celebrities into the database when they noticed a glitch where the birthday they entered would automatically go back a day. Not knowing why this was happening, I told them to just set the birthdays a day ahead as a workaround and learned yet again that workarounds are rarely the answer. The dates ended up being entered to the database correctly but as they were stored in Coordinated Universal Time (UTC), they returned to the frontend in the user's local timezone causing the \"glitch\" where they appeared a day behind.</p> <p>I also struggled trying to find a solution as to why daily dances weren't refreshing at midnight in the user's local timezone. It took far too long for me to realize JavaScript <code>Date()</code> objects would only help me so much, especially when the backend server is set to UTC. Many articles online guided developers into using MomentJS but the package is now deprecated. I eventually took advantage of Luxon in both the frontend and backend to give me the solution I was looking for.</p>"},{"location":"dev/overview/","title":"Overview","text":"<p>The app was built with the following technologies</p> <p>Info</p> <p>This page is currently under construction and not yet completed</p>"},{"location":"dev/overview/#frontend","title":"Frontend","text":"<p>The frontend of the application was built using ReactJS and heavily incorporated MaterialUI as a reusable, customizable library on top of React.</p>"},{"location":"dev/overview/#mui-theme","title":"MUI Theme","text":""},{"location":"dev/overview/#redux","title":"Redux","text":""},{"location":"dev/overview/#_1","title":"Overview","text":""},{"location":"dev/overview/#backend","title":"Backend","text":"<p>NodeJS is the JavaScript runtime environment used to build the application using the ExpressJS framework.</p>"},{"location":"dev/overview/#middleware","title":"Middleware","text":"<p>Middleware is used for boh authentication and for uploading images with multer. Cookies are used to store either a JWT that contains the user's session expiration and their user ID or a custom token consisting of the user's session expiration and a Google OAuth 2.0 token used to obtain the user's email. The auth middleware is processed in almost every API call and checks to see if the user's session is still valid. If any errors occur, a 401 error is sent back to the client. The frontend handles 401 errors by immediately logging the user out of the app as all app content is intended only for authenticated users.</p>"},{"location":"dev/overview/#routing","title":"Routing","text":""},{"location":"dev/overview/#role-based-access-control","title":"Role Based Access Control","text":"<p>Role Based Access Control (RBAC) is used to create roles and handle specific permissions. Four roles are used, those being fan, pro, moderator, and admin.</p>"},{"location":"dev/overview/#emailing","title":"Emailing","text":"<p>The app uses Nodemailer to send out both account verification and password reset emails.</p>"},{"location":"dev/overview/#database","title":"Database","text":"<p>The app uses PostgreSQL as its relational database management system. No ORMs were implemented; only raw SQL can be seen in the backend directory.</p>"},{"location":"dev/overview/#crud-operations","title":"CRUD Operations","text":"<p>The four CRUD operations (Create, Read, Update, Delete) are used in dozens of different database queries to achieve the app's core functionalities. The app's data is very complex - consisting of many different yet intertwining types which include the following and their respective dependent data:</p> <ul> <li>Celebrities</li> <li>Professionals</li> <li>Seasons</li> <li>Teams - celeb, pro, and season</li> <li>Episodes - season</li> <li>Dances - episode</li> <li>Judges</li> <li>Scores - judge and score</li> <li>Dancers - dance and either celeb, pro, or team</li> <li>Tours - season</li> <li>Tour Cast - tour and either celeb or pro</li> <li>Users - season (optional)</li> </ul> <p>Each of these types are separated into their own backend controllers where CRUD operations are used to handle adding, fetching, updating, and deleting objects from the database.</p> <p>The following code is an example of an <code>Add</code> operation used to add a celebrity into the database:</p> <pre><code>export const addCeleb = async (req, res) =&gt; {\n    try {\n        const {\n            first_name,\n            last_name,\n            birthday,\n            height,\n            gender,\n            twitter,\n            instagram,\n            tiktok,\n            is_junior,\n        } = req.body;\n\n        const result = await pool.query(\n            `\n            INSERT INTO celebs (\n                first_name,\n                last_name,\n                birthday,\n                height,\n                gender,\n                twitter,\n                instagram,\n                tiktok,\n                is_junior\n            )\n            VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\n            RETURNING *\n            `,\n            [\n                first_name,\n                last_name,\n                birthday,\n                height,\n                gender,\n                twitter,\n                instagram,\n                tiktok,\n                is_junior,\n            ]\n        );\n\n        res.status(200).json(result.rows[0]);\n    } catch (error) {\n        res.status(500).json({ message: error });\n    }\n\n};\n</code></pre>"},{"location":"dev/overview/#additional-operations","title":"Additional Operations","text":"<p>The app uses these basic CRUD operations to allow for additional app features, such as setting user scores and liking functionality.</p> <p>The following code is used to like a dance:</p> <pre><code>export const likeDance = async (req, res) =&gt; {\n    try {\n        const { id } = req.params;\n\n        if (!req.userId) {\n            return res.status(401).json({ message: 'Unauthenticated' });\n        }\n\n        const query = await pool.query(\n            `\n            SELECT EXISTS(\n                SELECT 1\n                FROM dance_likes\n                WHERE dance_id = $1\n                    AND user_id = $2\n            )\n            `,\n            [id, req.userId]\n        );\n\n        const user = await pool.query(\n            `\n            SELECT id, username\n            FROM users u\n            WHERE id = $1\n            `,\n            [req.userId]\n        );\n\n        if (query.rows[0].exists) {\n            await pool.query(\n                `\n                DELETE FROM dance_likes\n                WHERE dance_id = $1\n                AND user_id = $2\n                `,\n                [id, req.userId]\n            );\n            res.status(200).json({ user: user.rows[0], type: 'unlike' });\n        } else {\n            const liked_at = new Date();\n\n            await pool.query(\n                `\n                INSERT INTO dance_likes (\n                    dance_id,\n                    user_id,\n                    liked_at\n                )\n                VALUES($1, $2, $3)\n                `,\n                [id, req.userId, liked_at]\n            );\n            res.status(200).json({ user: user.rows[0], type: 'like' });\n        }\n    } catch (error) {\n        res.status(500).json({ message: error });\n    }\n};\n</code></pre>"},{"location":"dev/overview/#future-development","title":"Future Development","text":"<p>Below are a few plans for future development I hope to achieve:</p> <ul> <li> Users can score any dance - not restricted to daily dances</li> <li> Individual season pages</li> <li> Individual tour pages<ul> <li> Incorporation of tour dances</li> </ul> </li> <li> Rankings &amp; polls</li> <li> Point system</li> </ul>"},{"location":"overview/features/","title":"Features","text":"<p>Info</p> <p>This page is currently under construction and not yet completed</p>"},{"location":"overview/features/#search-portal","title":"Search Portal","text":""},{"location":"overview/features/#dances","title":"Dances","text":""},{"location":"overview/features/#teams","title":"Teams","text":""},{"location":"overview/features/#pros","title":"Pros","text":""},{"location":"overview/features/#fans","title":"Fans","text":""},{"location":"overview/overview/","title":"Overview","text":"<p>Learn the basics of the app and its main pages</p>"},{"location":"overview/overview/#sign-up-sign-in","title":"Sign Up / Sign In","text":"<p>To make the app exclusive to Dancing with the Stars fans, every user must have a valid account with a verified email address to access app content.</p> <p>To save the trouble of remembering another password, users can sign up/in with a valid Google account. If users choose to make an account the traditional way, they will be sent a verification email upon registration and will need to verify their email. Once an account is created and verified, they will be redirected to the app's dashboard page.</p> <p></p>"},{"location":"overview/overview/#dashboard","title":"Dashboard","text":"<p>The dashboard page gives users a brief overview of the app along with displaying pro/celeb/fan birthdays for the day, the dance of the day, and past season/tour throwbacks if there happen to be any.</p> <p>Users can submit their personal score for each daily dance and check back the next day to see how their score compares to others.</p> <p></p>"},{"location":"overview/overview/#overview_1","title":"Overview","text":"<p>The overview page covers seasons at a glance (displaying the final 3 teams from each season), tours at a glance (displaying the pros and celebs who were on each respective tour), and a long list of statistics about teams and pros.</p> <p></p>"},{"location":"overview/overview/#search","title":"Search","text":"<p>The search page is main hub of the app, consisting of every dance, team, and pro from the show along with the list of fans registered in the app. Each search page has an extensive filter feature where users can filter and sort to find dances by style, teams with the most likes, pros under a certain age, etc.</p> <p></p>"},{"location":"overview/overview/#activity","title":"Activity","text":"<p>The activity page shows the 25 most recent scores and 25 most recent likes from fans along with yesterday's daily dance and its resulting average score.</p> <p></p>"},{"location":"overview/overview/#account","title":"Account","text":"<p>The account page displays an overview of the user's profile, including their likes, and provides access to account settings, dark mode toggle, and an option to log out.</p> <p></p>"}]}